my.lp
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
my.lp
str(my.lp)
summary(my.lp)
print(my.lp)
write.lp(my.lp, "my.lp")
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
make.lp(3, 2)
rm(list = ls())
library(lpSolveAPI)
set.seed(1231)
n <- 10
k <- 1
y <- matrix(rnorm(n), ncol=1)
X <- matrix(rnorm(n*k), ncol=k)
i <- 1
# Constraints:
#  sum(lambda) = 1 : 1
#  lambda*xk' = xk : k
#  TOTAL: 1 + k
#
# Variables:
#  lambda: n - 1
my.lp <- lpSolveAPI::make.lp(1 + k, n - 1)
my.lp
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
my.lp
D
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
my.lp
D
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
X[i,]
solve(my.lp)
?solve
?lpSolveAPI::solve
?lpSolveAPI::solve.lpExtPtr
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
my.lp
lpSolveAPI::get.objective(my.lp)
lpSolveAPI::get.variables(my.lp)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
lpSolveAPI::get.constr.value(my.lp)
X[i,]
my.lp
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
blopi(X, 2)
X
blopi(2, i)
blopi(2, X)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
nrow(X)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
cat(sprintf("Number of statuses"))
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
ans
str(ans)
sapply(ans, "[[", "staus")
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
ans
ans[[1]]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
ans[[1]]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
ans[[1]]
ans[[1]]$lambda
sum(ans[[1]]$lambda)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
which(sapply(ans, "[[", "status") == 2)
ans[which(sapply(ans, "[[", "status") == 2)]
?get.constraints
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
which(sapply(ans, "[[", "status") == 2)
ans
ans[[1]]
ans[[3]]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
ans[[1]]
ans[[2]]
ans[[3]]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
ans[[1]]
ans[[2]]
ans[[3]]
x[3]
X[3]
range(X)
ans
which(sapply(ans, "[[", "status") != 0)
X[which(sapply(ans, "[[", "status") != 0),]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
X[which(sapply(ans, "[[", "status") != 0),]
range(X)
ans
X
ans[[3]]
ans[[8]]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
ans[[1]]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
which(sapply(ans, "[[", "status") != 0)
ans[[51]]
ans[[1]]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
an
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
ans[[1]]
ans[[2]]
ans[[3]]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans[[1]]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans[[17]]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans[[1]]
X[1,]
X[-1,]
plot(X)
plot(X[1,,drop=FALSE], col="red")
plot(X)
points(X[1,,drop=FALSE], col="red")
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
plot(X[,1:2], pch=20)
points(X[unsolved,,drop=FALSE], col="red")
plot(X[,1:2], pch=20, col="lightgray")
points(X[unsolved,,drop=FALSE], col="red")
text(X[unsolved,,drop=FALSE],text=unsolved, col="red")
text(X[unsolved,,drop=FALSE], labels =unsolved, col="red")
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans[[1]]
ans[[2]]
ans[[51]]
ans[[51]]$lambda
length(ans[[51]]$lambda)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans[[51]]
ans[[51]]$lambda
(ans[[51]]$lambda)/sum(ans[[51]]$lambda)
(ans[[51]]$lambda)/sum(ans[[51]]$lambda)*X[-51,]
length((ans[[51]]$lambda)/sum(ans[[51]]$lambda))
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
length((ans[[51]]$lambda)/sum(ans[[51]]$lambda))
(ans[[51]]$lambda)/sum(ans[[51]]$lambda)*X[-51,]
colSums((ans[[51]]$lambda)/sum(ans[[51]]$lambda)*X[-51,])
ans[[51]]$xi
plot.blopmatch_match <- function(x, y=NULL, ...) {
unsolved <- colSums(sapply(x, "[[", "slack"))
which(unsolved != 0)
}
plot.blopmatch_match <- function(x, y=NULL, ...) {
unsolved <- colSums(sapply(x, "[[", "slack"))
unsolved != 0
}
plot(ans)
length(ans)
plot.blopmatch_match <- function(x, y=NULL, ...) {
unsolved <- colSums(sapply(x, "[[", "slack"))
unsolved
}
plot(ans)
plot.blopmatch_match <- function(x, y=NULL, ...) {
unsolved <- sapply(x, "[[", "slack")
unsolved
}
plot(ans)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans <- blop(X)
ans
plot(ans)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
plot(ans)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
plot.blopmatch_match <- function(x, y=1:min(2, ncol(x$X)), ...) {
unsolved <- which(colSums(sapply(x$matches, "[[", "slack")) != 0)
plot(x$X[,y,drop=FALSE], pch=20, col="lightgray")
if (length(unsolved))
text(x$X[unsolved,y,drop=FALSE], legend = unsolved, col="red")
}
plot(ans)
ans$matches[[1]]
ans$matches[[1]]
sprintf("%.10f", ans$matches[[1]]$slack)
sum(ans$matches[[1]]$slack)
sum(ans$matches[[1]]$slack) == 0
debugSource('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans[[1]]
ans[[1]]$lambda
ans[[1]]$lambda*X[-1,,]
colSums(ans[[1]]$lambda*X[-1,,drop=FALSE])
ans[[1]]$xi
sum(ans[[1]]$lambda)
colSums(ans[[3]]$lambda*X[-3,,drop=FALSE])
ans[[3]]$xi
ans[[3]]$status
ans[[3]]$constr
ans[[3]]$slack
ans[[3]]$obj
ans[[3]]$lambda
range(ans[[3]]$lambda)
sum(ans[[3]]$lambda)
colSums(ans[[3]]$lambda*X[-3,,drop=FALSE])
X[3,]
colSums(ans[[100]]$lambda*X[-100,,drop=FALSE])
X[100,]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans[[2]]
ans$matches[[2]]
ans$matches[[2]]$lambda
ans$matches[[2]]$lambda * X[-2,]
colSums(ans$matches[[2]]$lambda * X[-2,])
X[2,]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans[[1]]
ans$matches[[1]]
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans$matches[[1]]
colSums(ans$matches[[1]]$lambda * X[-1,])
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans$matches[[1]]
ans$X
ans$X - ans$X_pred
sqrt(rowSums((ans$X - ans$X_pred)^2))
hist(sqrt(rowSums((ans$X - ans$X_pred)^2)))
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
hist(sqrt(rowSums((ans$X - ans$X_pred)^2)), breaks = 100)
summary(sqrt(rowSums((ans$X - ans$X_pred)^2)))
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
blopi(1,X)
install.packages("microbenchmar")
install.packages("microbenchmark")
microbenchmark::microbenchmark(blopi(1, X))
microbenchmark::microbenchmark(blopi(1, X), unit="s")
.014*300
.014*1e3
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
install.packages("Rglpk")
install.packages("Rglpk")
install.packages("Rglpk")
library(Rglpk)
?Rglpk_solve_LP
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
blopi(1,X)
blopi_glpk(1, X)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
blopi_glpk(1, X)
ans_glpk    <- blopi_glpk(1, X)
ans_glpk
ans_lpsolve <- blopi(1,X)
which(ans_lpsolve$lambda != 0)
which(ans_glpk$lambda != 0)
all.equal(ans_glpk$lambda, ans_lpsolve$lambda)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
ans_glpk
plot(ans)
ans
system.time(ans <- blop(X, solver = "lpsolve"))
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
source('~/Dropbox/repos/blop/lpsolveapi.r', echo=TRUE)
system.time(ans <- blop(X, solver = "glpk"))
ans
plot(ans)
ans
library(blopmatch)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README-"
)
set.seed(1331)
X <- matrix(rnorm(20*2), ncol=2)
blopi_glpk(5, X)
ans <- blopi_glpk(5, X)
ans$lambda
X[5,]
colSums(ans$lambda*X[-5,])
library(blopmatch)
?cholesk
??cholesky
Rcpp::sourceCpp('src/exact.cpp')
library(Matrix)
var(X)
chol(var(X))
chol(var(X)) %*%chol(var(X))
chol(var(X)) %*% t(chol(var(X)))
t(chol(var(X))) %*%chol(var(X))
library(Matrix)
X <- cbind(
c(0:5, 0),
c(1:6, 1)
)
X[3,] <- X[1,]
X[4, 1] <- X[1,1]
E <- c(0,1)
exact_match(X, E) # 1, 3, 7
exact_match(X, 0) # 1, 3, 4, 7
library(microbenchmark)
microbenchmark(
quadformdist(X, diag(2)),
X %*% diag(2) %*% t(X)
)
W <- solve(var(X))
quadformdist(X, W)
as.matrix(dist(X %*% chol(W)))
as.matrix(dist(X %*% t(chol(W))))
quadformdist(X, W)
d <- matrix(NA, nrow=nrow(X), ncol=ncol(X))
for (i in 1:nrow(X)) {
for (j in i:nrow(X)) {
val <- X[i,,drop=FALSE] - X[j,,drop=FALSE]
d[i,j] <- val %*% W %*% t(val)
}
}
d <- matrix(NA, nrow=nrow(X), ncol=ncol(X))
for (i in 1:nrow(X)) {
for (j in i:nrow(X)) {
val <- X[i,,drop=FALSE] - X[j,,drop=FALSE]
d[i,j] <- val %*% W %*% t(val)
}
}
d
d <- matrix(NA, nrow=nrow(X), ncol=nrow(X))
for (i in 1:nrow(X)) {
for (j in i:nrow(X)) {
val <- X[i,,drop=FALSE] - X[j,,drop=FALSE]
d[i,j] <- val %*% W %*% t(val)
}
}
d
d <- matrix(NA, nrow=nrow(X), ncol=nrow(X))
for (i in 1:nrow(X)) {
for (j in i:nrow(X)) {
val <- X[i,,drop=FALSE] - X[j,,drop=FALSE]
d[i,j] <- val %*% W %*% t(val)
d[j,i] <- d[i,j]
}
}
d
quadformdist(X, W)
devtools::use_testthat()
library(testthat)
X <- cbind(
c(0:5, 0),
c(1:6, 1)
)
X[3,] <- X[1,]
X[4, 1] <- X[1,1]
exact_match(X, c(0, 1)) # 1, 3, 7
exact_match(X, 0) # 1, 3, 4, 7
which(exact_match(X, c(0, 1))[1,])
which(exact_match(X, c(0, 1))[1,] == 1)
ans <- which(exact_match(X, c(0, 1))[1,] == 1) # 1, 3, 7
expect_equal(ans, c(3, 7))
ans
exact_match(X, 0) # 1, 3, 4, 7
ans <- which(exact_match(X, 0)[1,] == 1) # 1, 3, 4, 7
ans
expect_equal(ans, c(3, 4, 7))
ans0 <- quadformdist(X, diag(2))
ans1 <- dist(X)
ans0
ans1 <- as.matrix(dist(X))
ans1
ans0 <- quadformdist(X, diag(2), 2)
ans1 <- as.matrix(dist(X))
ans0
ans0 <- quadformdist(X, diag(2), 1)
ans0
ans1 <- as.matrix(dist(X))
ans1
sqrt(ans0)
Rcpp::sourceCpp('src/exact.cpp')
ans0 <- quadformdist(X, diag(2), 1)
ans0
ans1 <- as.matrix(dist(X))
ans0 <- quadformdist(X, diag(2), 1)
expect_equal(ans0, ans1)
expect_equivalent(ans0, ans1)
# Mahalanobis
quadformdistR <- function(X, W) {
d <- matrix(NA, nrow=nrow(X), ncol=nrow(X))
for (i in 1:nrow(X)) {
for (j in i:nrow(X)) {
val <- X[i,,drop=FALSE] - X[j,,drop=FALSE]
d[i,j] <- val %*% W %*% t(val)
d[j,i] <- d[i,j]
}
}
d
}
W <- solve(var(X))
quadformdistR(X, W)
quadformdist(X, W)
devtools::use_rcpp()
install.packages(c("lpSolveAPI", "Rglpk"))
install.packages(c("Rglpk"))
library(blopmatch)
?quadformdist
library(blopmatch)
library(blopmatch)
library(blopmatch)
X <- cbind(
c(0:5, 0),
c(1:6, 1)
)
X[3,] <- X[1,]
X[4, 1] <- X[1,1]
ans <- matching_groupi(X[1,,drop=FALSE], X[-1,])
ans
ans[1]
ans[2]
X
ans+2
ans <- matching_groupi(X[1,,drop=FALSE], X[-1,])
expect_equivalent(ans + 2, c(3, 7))
ans <- as.vector(matching_groupi(X[1,,drop=FALSE], X[-1,]))
expect_equivalent(ans + 2, c(3, 7))
library(blopmatch)
ans <- as.vector(matching_group(X, rep(-1, 7)))
ans
expect_equivalent(ans[[1]] + 1, c(3, 7))
ans <- matching_group(X, rep(-1, 7))
ans
expect_equivalent(ans[[1]][,1] + 1, c(3, 7))
expect_equivalent(ans[[1]][,1] + 1, c(3, 7))
expect_equivalent(ans[[3]][,1] + 1, c(1, 7))
expect_equivalent(ans[[7]][,1] + 1, c(1, 3))
?matching_group
library(blopmatch)
