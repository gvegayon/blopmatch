// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// matching_group_cpp
List matching_group_cpp(const arma::ivec& Treat, const arma::mat& exact, int zeroindex);
RcppExport SEXP _blopmatch_matching_group_cpp(SEXP TreatSEXP, SEXP exactSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type Treat(TreatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type exact(exactSEXP);
    Rcpp::traits::input_parameter< int >::type zeroindex(zeroindexSEXP);
    rcpp_result_gen = Rcpp::wrap(matching_group_cpp(Treat, exact, zeroindex));
    return rcpp_result_gen;
END_RCPP
}
// weighted_norm
arma::mat weighted_norm(const arma::mat& X, const arma::mat& W, double p);
RcppExport SEXP _blopmatch_weighted_norm(SEXP XSEXP, SEXP WSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_norm(X, W, p));
    return rcpp_result_gen;
END_RCPP
}
// glpk_example
List glpk_example(const NumericVector& obj, const NumericMatrix& subj_lhs, const NumericVector& subj_rhs, const StringVector pname);
RcppExport SEXP _blopmatch_glpk_example(SEXP objSEXP, SEXP subj_lhsSEXP, SEXP subj_rhsSEXP, SEXP pnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type obj(objSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type subj_lhs(subj_lhsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type subj_rhs(subj_rhsSEXP);
    Rcpp::traits::input_parameter< const StringVector >::type pname(pnameSEXP);
    rcpp_result_gen = Rcpp::wrap(glpk_example(obj, subj_lhs, subj_rhs, pname));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_blopmatch_matching_group_cpp", (DL_FUNC) &_blopmatch_matching_group_cpp, 3},
    {"_blopmatch_weighted_norm", (DL_FUNC) &_blopmatch_weighted_norm, 3},
    {"_blopmatch_glpk_example", (DL_FUNC) &_blopmatch_glpk_example, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_blopmatch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
